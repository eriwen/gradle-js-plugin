buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:2.2.8"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
    }
}

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.8
targetCompatibility = 1.8

defaultTasks 'clean', 'build'

version = '1.12.1'
group = 'com.eriwen'
ext.archivesBaseName = 'gradle-js-plugin'
ext.isSnapshot = version.endsWith("-SNAPSHOT")

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile 'org.codehaus.groovy:groovy-all:2.3.10'

    compile ('com.google.javascript:closure-compiler:v20131014') {
        exclude module: 'junit'
    }
    compile ('io.jdev.html2js:html2js:0.1') {
        exclude module: 'groovy-all'
    }

    testCompile ('org.spockframework:spock-core:1.0-groovy-2.3') {
        exclude module: 'junit-dep'
        exclude module: 'groovy-all'
    }
}

idea.module {
    ext.gradleCacheVariable = 'GRADLE_CACHE'
    ext.downloadJavadoc = true
    ext.downloadSource = true
    outputDir = file('intellij/out')
    testOutputDir = file('intellij/testOut')
}

idea.project.ipr.withXml { provider ->
    def node = provider.asNode()
    // Use git
    def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
    vcsConfig.mapping[0].'@vcs' = 'Git'

    // Set gradle home
    def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
    gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])

    // Add gradle IDE support
    def gradleUISettings = node.appendNode('component', [name: 'GradleUISettings'])
    gradleUISettings.appendNode('setting', [name: 'root'])

    def gradleUISettings2 = node.appendNode('component', [name: 'GradleUISettings2'])
    gradleUISettings2.appendNode('setting', [name: 'root'])
}

compileGroovy {
   options.compilerArgs = ['-Xlint:deprecation', '-Xlint:unchecked']
}

task sourceJar(type: Jar) {
    description = 'An archive of the source code for Maven Central'
    classifier = 'sources'
    from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
    description = 'An archive of the GroovyDocs for Maven Central'
    classifier = 'javadoc'
    from groovydoc
}

cobertura {
    coverageFormats = ['html']
    coverageIncludes = ['**/*.java', '**/*.groovy']
    coverageExcludes = ['**/commonJs/**/*.*']
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

artifacts {
    archives groovydocJar, sourceJar
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            if (plugins.hasPlugin('war')) {
                from components.web
            } else {
                from components.java
            }

            artifact sourceJar {
                classifier 'sources'
            }

            artifact groovydocJar {
                classifier 'javadoc'
            }
        }
    }
}

signing {
    sign configurations.archives
}

bintray {
    user = System.properties['bintrayUsername']
    key = System.properties['bintrayApiKey']
    publications = ['maven']
    pkg {
        repo = 'gradle-plugins'
        name = 'gradle-js-plugin'
        desc = 'Gradle plugin for working with JS.'
        licenses = ['Apache-2.0']
        labels = ['gradle', 'js']
    }
}

test {
    systemProperties['version'] = version
    testLogging {
        stackTraceFilters 'truncate', 'groovy'
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
}

// Only *require* signing if we are uploading a non snapshot version
gradle.taskGraph.whenReady { taskGraph ->
    tasks.withType(org.gradle.plugins.signing.Sign).all {
        required = taskGraph.hasTask(":uploadArchives") && !isSnapshot
    }
}

install.repositories.mavenInstaller {
    pom.project(pomConfiguration)
    if (signing.signatory) {
        beforeDeployment { signing.signPom(it) }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        if (signing.signatory) {
            beforeDeployment { signPom(it) }
        }
        name = 'mavenCentralReleaseDeployer'
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: System.properties['mavenCentralUsername'], password: System.properties['mavenCentralPassword'])
            releases(updatePolicy: 'always')
            snapshots(updatePolicy: 'always')
        }
        pom.project(pomConfiguration)
    }
}

/**
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() {
    return {
        name 'Gradle JS Plugin'
        packaging 'jar'
        description 'A Gradle plugin for working with JS.'
        url 'https://github.com/eriwen/gradle-js-plugin'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'eriwen'
                name 'Eric Wendelin'
                email 'me@eriwen.com'
            }
        }
        scm {
            connection 'scm:https://eriwen@github.com/eriwen/gradle-js-plugin'
            developerConnection 'scm:git@github.com:eriwen/gradle-js-plugin.git'
            url 'https://github.com/eriwen/gradle-js-plugin'
        }
    }
}

// download dependencies all at once, keeps downloads out of travis output
task resolveAllDependencies {
    doLast {
        configurations.all { it.resolve() }
    }
}
